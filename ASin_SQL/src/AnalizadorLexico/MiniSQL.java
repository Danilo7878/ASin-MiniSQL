/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AnalizadorLexico;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author danil
 */
public class MiniSQL extends javax.swing.JFrame {

    /**
     * Creates new form MiniSQL
     */
    String PathSQL = "";
    
    public MiniSQL() {
        initComponents();
        txtArea_Errores.setForeground(Color.RED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_elegirArchivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_ChosenPath = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        btn_Escanear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea_Errores = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_elegirArchivo.setBackground(new java.awt.Color(0, 0, 0));
        btn_elegirArchivo.setFont(new java.awt.Font("Tempus Sans ITC", 0, 12)); // NOI18N
        btn_elegirArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btn_elegirArchivo.setText("Examinar");
        btn_elegirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_elegirArchivoActionPerformed(evt);
            }
        });

        txt_ChosenPath.setEditable(false);
        txt_ChosenPath.setFont(new java.awt.Font("Tempus Sans ITC", 0, 10)); // NOI18N
        jScrollPane1.setViewportView(txt_ChosenPath);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 10)); // NOI18N
        jLabel1.setText("elegir archivo con código Mini-SQL");

        btn_Escanear.setBackground(new java.awt.Color(0, 153, 51));
        btn_Escanear.setFont(new java.awt.Font("Segoe WP SemiLight", 1, 11)); // NOI18N
        btn_Escanear.setText("Escanear");
        btn_Escanear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_EscanearFocusGained(evt);
            }
        });
        btn_Escanear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EscanearActionPerformed(evt);
            }
        });

        txtArea_Errores.setEditable(false);
        txtArea_Errores.setColumns(20);
        txtArea_Errores.setRows(5);
        jScrollPane2.setViewportView(txtArea_Errores);

        jLabel2.setFont(new java.awt.Font("Kristen ITC", 1, 14)); // NOI18N
        jLabel2.setText("Analizador de Léxico Mini-SQL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(btn_Escanear, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_elegirArchivo)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_elegirArchivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(btn_Escanear)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_elegirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_elegirArchivoActionPerformed
        // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo Mini-SQL", "sql", "sql");
        jf.setFileFilter(filter);
        int r = jf.showOpenDialog(null);
        if(r==JFileChooser.APPROVE_OPTION){
            File f = jf.getSelectedFile();
            PathSQL = f.getAbsolutePath();
            txt_ChosenPath.setText(PathSQL);
            txtArea_Errores.setText("");
        }
    }//GEN-LAST:event_btn_elegirArchivoActionPerformed

    private void btn_EscanearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EscanearActionPerformed
    txtArea_Errores.setText("");
    if (!PathSQL.equals("")){
        try {
            // TODO add your handling code here:
            Reader escanear = new BufferedReader(new FileReader(PathSQL));
            Lexer lexer = new Lexer(escanear);
            String[] fichero_extension = PathSQL.split(Pattern.quote("."));
            String NewPath = fichero_extension[0].concat(".out");
            PrintWriter escribir = new PrintWriter(new File(NewPath));
            String errores = "";
            
            while (true) {
            Tokens token = lexer.yylex();
                if (token == null) {
                    //cerrar el archivo.out 
                    txtArea_Errores.setText(errores);
                    escribir.flush();
                    escribir.close();                    
                    txtArea_Errores.append("\nPara mayor información consulte el archivo --> " + NewPath);
                    return;                                     
                }
                
                //seleccionar el tipo de Token
                switch (token) {
                    case Palabra_Reservada: case Float: case Bit: case Int: case Simbolo: 
                        escribir.println("Token: "+ token+ "|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                        + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna);
                        break;
                    case ComentarioSimple:
                        escribir.println("Token: "+token+"|Linea: "+lexer.linea);
                        break;                        
                    case ComentarioMultilinea:
                        escribir.println("Token: "+token+"|Linea Inicial: "+lexer.linea);
                        break;
                    case Identificador:
                        if (lexer.yylength() > 31) {
                            String TokenTruncado = lexer.lexeme.substring(0, 31);
                            
                            escribir.println("Token: "+ token+ "|Valor: " + TokenTruncado + "|Linea: " + lexer.linea
                            + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna 
                            + "|ALERTA: Indentificador Truncado");
                            
                            errores += "ALERTA: Indentificador Truncado|Valor: " + TokenTruncado + "|Linea: " + lexer.linea
                            + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna + "\n";
                        }
                        else{
                        escribir.println("Token: "+ token+ "|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                        + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna);
                        }
                        break;
                    case FloatError:
                        escribir.println("FLOAT ERROR: cadena no válida para el tipo de dato|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                        + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna);
                        
                        errores+= "FLOAT ERROR: cadena no válida para el tipo de dato|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                                  + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna + "\n";                        
                        break;
                    case StringError:
                        escribir.println("STRING ERROR: Falta <'> o se encontró un salto de linea|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                        + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna);
                        
                        errores+= "STRING ERROR: Falta <'> o se encontró un salto de linea|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                                  + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna + "\n";
                        break;
                    case String:
                        String quitarSalto = lexer.lexeme.replaceAll("\n", "");
                        quitarSalto = quitarSalto.replaceAll("\r", "");
                        escribir.println("Token: "+ token+ "|Valor: " + quitarSalto + "|Linea: " + lexer.linea
                        + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna);
                        break;
                    case ComentarioMultilineaError:
                        escribir.println("ERROR: Comentario Multilinea sin cerrar|Linea Inicial: " + lexer.linea);
                        
                        errores+= "ERROR: Comentario Multilinea sin cerrar|Linea Inicial: " + lexer.linea+"\n";
                        break;
                    case ERROR:
                        escribir.println("ERROR: cadena no reconocida|Valor: "+lexer.lexeme+"|Linea: "+lexer.linea
                        +"|Columna Inicio: "+lexer.PrimeraColumna+"|Columna Fin: "+lexer.UltimaColumna);
                        errores+= "ERROR: cadena no reconocida|Valor: "+lexer.lexeme+"|Linea: "+lexer.linea
                                +"|Columna Inicio: "+lexer.PrimeraColumna+"|Columna Fin: "+lexer.UltimaColumna+"\n";
                        break;
                    default:
                        throw new AssertionError();
                }
            }
                        
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MiniSQL.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MiniSQL.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    else{
        txtArea_Errores.setText("ALERTA: No se ha seleccionado un Archivo aún");
    }
    }//GEN-LAST:event_btn_EscanearActionPerformed

    private void btn_EscanearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_EscanearFocusGained
    
    }//GEN-LAST:event_btn_EscanearFocusGained

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Escanear;
    private javax.swing.JButton btn_elegirArchivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtArea_Errores;
    private javax.swing.JTextPane txt_ChosenPath;
    // End of variables declaration//GEN-END:variables
}
